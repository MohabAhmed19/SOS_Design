
SOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000512  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000512  000005a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800074  00800074  000005ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014da  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac2  00000000  00000000  00001c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb2  00000000  00000000  0000275c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  00003310  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000882  00000000  00000000  000035d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ac4  00000000  00000000  00003e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000491e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 35 02 	jmp	0x46a	; 0x46a <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 77 00 	call	0xee	; 0xee <main>
  8a:	0c 94 87 02 	jmp	0x50e	; 0x50e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle_led_300>:
#include "../HAL/push_button/Push_bottun.h"
#include "../SERVICE/SOS/SOS.h"

void toggle_led_300(void)
{
	LED_toggle(DIO_PORTB, DIO_PIN3);
  92:	63 e0       	ldi	r22, 0x03	; 3
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	0e 94 69 00 	call	0xd2	; 0xd2 <LED_toggle>
  9a:	08 95       	ret

0000009c <toggle_led_500>:
}

void toggle_led_500(void)
{
	LED_toggle(DIO_PORTB, DIO_PIN4);
  9c:	64 e0       	ldi	r22, 0x04	; 4
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	0e 94 69 00 	call	0xd2	; 0xd2 <LED_toggle>
  a4:	08 95       	ret

000000a6 <APP_init>:



void APP_init(void)
{
	sos_init();
  a6:	0e 94 ba 01 	call	0x374	; 0x374 <sos_init>
	sos_create_task(0, 1, 300);
  aa:	4c e2       	ldi	r20, 0x2C	; 44
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <sos_create_task>
	sos_create_task(1, 2, 500);
  b4:	44 ef       	ldi	r20, 0xF4	; 244
  b6:	62 e0       	ldi	r22, 0x02	; 2
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 d5 01 	call	0x3aa	; 0x3aa <sos_create_task>
  be:	08 95       	ret

000000c0 <APP>:
}

void APP(void)
{
	sos_run();	
  c0:	0e 94 ed 01 	call	0x3da	; 0x3da <sos_run>
  c4:	08 95       	ret

000000c6 <LED_init>:
	else
	{
		error=1;
	}
	return error;
}
  c6:	41 e0       	ldi	r20, 0x01	; 1
  c8:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_setpindir>
  cc:	81 11       	cpse	r24, r1
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	08 95       	ret

000000d2 <LED_toggle>:

uint8_t LED_toggle(uint8_t Port_number, uint8_t Pin_number)
{
	uint8_t error=0;
	if(DIO_togglepin(Port_number, Pin_number) == 0)
  d2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <DIO_togglepin>
  d6:	81 11       	cpse	r24, r1
	{
		error=0;
	}
	else
	{
		error=1;
  d8:	81 e0       	ldi	r24, 0x01	; 1
	}
	return error;
  da:	08 95       	ret

000000dc <PB_init>:
#include "Push_bottun.h"


uint8_t PB_init(uint8_t Port_number, uint8_t Pin_number)
{
	DIO_setpindir(Port_number, Pin_number, DIO_PIN_INPUT);
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_setpindir>
}
  e2:	08 95       	ret

000000e4 <PB_state>:

uint8_t PB_state(uint8_t Port_number, uint8_t Pin_number, uint8_t *state)
{
	uint8_t error = 0;
	if(DIO_readpin(Port_number, Pin_number, state) ==0)
  e4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_readpin>
  e8:	81 11       	cpse	r24, r1
	{
		error=0;
	}
	else
	{
		error=1;
  ea:	81 e0       	ldi	r24, 0x01	; 1
	}
	return error;
}
  ec:	08 95       	ret

000000ee <main>:
//#include <avr/io.h>
#include "APP/APP.h"

int main(void)
{
    APP_init();
  ee:	0e 94 53 00 	call	0xa6	; 0xa6 <APP_init>
	APP();
  f2:	0e 94 60 00 	call	0xc0	; 0xc0 <APP>
}
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	08 95       	ret

000000fc <DIO_setpindir>:
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
  fc:	44 23       	and	r20, r20
  fe:	19 f0       	breq	.+6      	; 0x106 <DIO_setpindir+0xa>
 100:	41 30       	cpi	r20, 0x01	; 1
 102:	e9 f1       	breq	.+122    	; 0x17e <DIO_setpindir+0x82>
 104:	74 c0       	rjmp	.+232    	; 0x1ee <DIO_setpindir+0xf2>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	99 f0       	breq	.+38     	; 0x130 <DIO_setpindir+0x34>
 10a:	28 f0       	brcs	.+10     	; 0x116 <DIO_setpindir+0x1a>
 10c:	82 30       	cpi	r24, 0x02	; 2
 10e:	e9 f0       	breq	.+58     	; 0x14a <DIO_setpindir+0x4e>
 110:	83 30       	cpi	r24, 0x03	; 3
 112:	41 f1       	breq	.+80     	; 0x164 <DIO_setpindir+0x68>
 114:	6e c0       	rjmp	.+220    	; 0x1f2 <DIO_setpindir+0xf6>
 116:	2a b3       	in	r18, 0x1a	; 26
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_setpindir+0x26>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_setpindir+0x22>
 126:	80 95       	com	r24
 128:	82 23       	and	r24, r18
 12a:	8a bb       	out	0x1a, r24	; 26
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret
 130:	27 b3       	in	r18, 0x17	; 23
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_setpindir+0x40>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_setpindir+0x3c>
 140:	80 95       	com	r24
 142:	82 23       	and	r24, r18
 144:	87 bb       	out	0x17, r24	; 23
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	08 95       	ret
 14a:	24 b3       	in	r18, 0x14	; 20
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_setpindir+0x5a>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_setpindir+0x56>
 15a:	80 95       	com	r24
 15c:	82 23       	and	r24, r18
 15e:	84 bb       	out	0x14, r24	; 20
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	08 95       	ret
 164:	21 b3       	in	r18, 0x11	; 17
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_setpindir+0x74>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_setpindir+0x70>
 174:	80 95       	com	r24
 176:	82 23       	and	r24, r18
 178:	81 bb       	out	0x11, r24	; 17
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	08 95       	ret
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	91 f0       	breq	.+36     	; 0x1a6 <DIO_setpindir+0xaa>
 182:	28 f0       	brcs	.+10     	; 0x18e <DIO_setpindir+0x92>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	d9 f0       	breq	.+54     	; 0x1be <DIO_setpindir+0xc2>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	29 f1       	breq	.+74     	; 0x1d6 <DIO_setpindir+0xda>
 18c:	34 c0       	rjmp	.+104    	; 0x1f6 <DIO_setpindir+0xfa>
 18e:	2a b3       	in	r18, 0x1a	; 26
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_setpindir+0x9e>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_setpindir+0x9a>
 19e:	82 2b       	or	r24, r18
 1a0:	8a bb       	out	0x1a, r24	; 26
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	08 95       	ret
 1a6:	27 b3       	in	r18, 0x17	; 23
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_setpindir+0xb6>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_setpindir+0xb2>
 1b6:	82 2b       	or	r24, r18
 1b8:	87 bb       	out	0x17, r24	; 23
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	08 95       	ret
 1be:	24 b3       	in	r18, 0x14	; 20
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_setpindir+0xce>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_setpindir+0xca>
 1ce:	82 2b       	or	r24, r18
 1d0:	84 bb       	out	0x14, r24	; 20
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	08 95       	ret
 1d6:	21 b3       	in	r18, 0x11	; 17
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_setpindir+0xe6>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_setpindir+0xe2>
 1e6:	82 2b       	or	r24, r18
 1e8:	81 bb       	out	0x11, r24	; 17
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	08 95       	ret
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	08 95       	ret
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	08 95       	ret
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	08 95       	ret

000001fa <DIO_readpin>:
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	f1 f0       	breq	.+60     	; 0x23a <DIO_readpin+0x40>
 1fe:	30 f0       	brcs	.+12     	; 0x20c <DIO_readpin+0x12>
 200:	82 30       	cpi	r24, 0x02	; 2
 202:	91 f1       	breq	.+100    	; 0x268 <DIO_readpin+0x6e>
 204:	83 30       	cpi	r24, 0x03	; 3
 206:	09 f4       	brne	.+2      	; 0x20a <DIO_readpin+0x10>
 208:	46 c0       	rjmp	.+140    	; 0x296 <DIO_readpin+0x9c>
 20a:	5c c0       	rjmp	.+184    	; 0x2c4 <DIO_readpin+0xca>
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = read_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 20c:	79 b3       	in	r23, 0x19	; 25
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	9c 01       	movw	r18, r24
 214:	06 2e       	mov	r0, r22
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_readpin+0x22>
 218:	22 0f       	add	r18, r18
 21a:	33 1f       	adc	r19, r19
 21c:	0a 94       	dec	r0
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_readpin+0x1e>
 220:	87 2f       	mov	r24, r23
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	82 23       	and	r24, r18
 226:	93 23       	and	r25, r19
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_readpin+0x34>
 22a:	95 95       	asr	r25
 22c:	87 95       	ror	r24
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_readpin+0x30>
 232:	fa 01       	movw	r30, r20
 234:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 236:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = read_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 238:	08 95       	ret
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = read_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 23a:	76 b3       	in	r23, 0x16	; 22
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	9c 01       	movw	r18, r24
 242:	06 2e       	mov	r0, r22
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_readpin+0x50>
 246:	22 0f       	add	r18, r18
 248:	33 1f       	adc	r19, r19
 24a:	0a 94       	dec	r0
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_readpin+0x4c>
 24e:	87 2f       	mov	r24, r23
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	82 23       	and	r24, r18
 254:	93 23       	and	r25, r19
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_readpin+0x62>
 258:	95 95       	asr	r25
 25a:	87 95       	ror	r24
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_readpin+0x5e>
 260:	fa 01       	movw	r30, r20
 262:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 264:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = read_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = read_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 266:	08 95       	ret
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = read_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 268:	73 b3       	in	r23, 0x13	; 19
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	9c 01       	movw	r18, r24
 270:	06 2e       	mov	r0, r22
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_readpin+0x7e>
 274:	22 0f       	add	r18, r18
 276:	33 1f       	adc	r19, r19
 278:	0a 94       	dec	r0
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_readpin+0x7a>
 27c:	87 2f       	mov	r24, r23
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	82 23       	and	r24, r18
 282:	93 23       	and	r25, r19
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_readpin+0x90>
 286:	95 95       	asr	r25
 288:	87 95       	ror	r24
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_readpin+0x8c>
 28e:	fa 01       	movw	r30, r20
 290:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 292:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = read_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = read_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 294:	08 95       	ret
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = read_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 296:	70 b3       	in	r23, 0x10	; 16
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	9c 01       	movw	r18, r24
 29e:	06 2e       	mov	r0, r22
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_readpin+0xac>
 2a2:	22 0f       	add	r18, r18
 2a4:	33 1f       	adc	r19, r19
 2a6:	0a 94       	dec	r0
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_readpin+0xa8>
 2aa:	87 2f       	mov	r24, r23
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	82 23       	and	r24, r18
 2b0:	93 23       	and	r25, r19
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_readpin+0xbe>
 2b4:	95 95       	asr	r25
 2b6:	87 95       	ror	r24
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_readpin+0xba>
 2bc:	fa 01       	movw	r30, r20
 2be:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 2c0:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = read_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = read_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 2c2:	08 95       	ret
		
		default:
		en_a_Pinstate = NOT_VALID_READ ;  /** READ IS NOT VALID  **/
 2c4:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/	
}
 2c6:	08 95       	ret

000002c8 <DIO_togglepin>:
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	91 f0       	breq	.+36     	; 0x2f0 <DIO_togglepin+0x28>
 2cc:	28 f0       	brcs	.+10     	; 0x2d8 <DIO_togglepin+0x10>
 2ce:	82 30       	cpi	r24, 0x02	; 2
 2d0:	d9 f0       	breq	.+54     	; 0x308 <DIO_togglepin+0x40>
 2d2:	83 30       	cpi	r24, 0x03	; 3
 2d4:	29 f1       	breq	.+74     	; 0x320 <DIO_togglepin+0x58>
 2d6:	30 c0       	rjmp	.+96     	; 0x338 <DIO_togglepin+0x70>
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
 2d8:	2b b3       	in	r18, 0x1b	; 27
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_togglepin+0x1c>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_togglepin+0x18>
 2e8:	82 27       	eor	r24, r18
 2ea:	8b bb       	out	0x1b, r24	; 27
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 2ec:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
		break;
 2ee:	08 95       	ret
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
 2f0:	28 b3       	in	r18, 0x18	; 24
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_togglepin+0x34>
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_togglepin+0x30>
 300:	82 27       	eor	r24, r18
 302:	88 bb       	out	0x18, r24	; 24
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 304:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTA , u8_a_pinid);
		break;
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
		break;
 306:	08 95       	ret
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
 308:	25 b3       	in	r18, 0x15	; 21
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_togglepin+0x4c>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_togglepin+0x48>
 318:	82 27       	eor	r24, r18
 31a:	85 bb       	out	0x15, r24	; 21
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 31c:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTB , u8_a_pinid);
		break;
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
		break;
 31e:	08 95       	ret
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
 320:	22 b3       	in	r18, 0x12	; 18
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_togglepin+0x64>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_togglepin+0x60>
 330:	82 27       	eor	r24, r18
 332:	82 bb       	out	0x12, r24	; 18
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 334:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTC , u8_a_pinid);
		break;
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
		break;
 336:	08 95       	ret
		
		default:
		/** DO NOTHING **/
		en_a_Pinreadstate = NOT_VALID_READ ; /** RETURN AN ERROR **/
 338:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinreadstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/
}
 33a:	08 95       	ret

0000033c <TMR0_init>:
	 /* TIMER MODE OF TMR0 */
	#elif TIMER0_CLK_SRC == INTERNAL_CLK_SRC
	
	 #if TIMER0_MODE == TMR0_NORMAL_MODE
	 
	 clear_bit(TCCR0 , 7);
 33c:	83 b7       	in	r24, 0x33	; 51
 33e:	8f 77       	andi	r24, 0x7F	; 127
 340:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 6);
 342:	83 b7       	in	r24, 0x33	; 51
 344:	8f 7b       	andi	r24, 0xBF	; 191
 346:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 3);
 348:	83 b7       	in	r24, 0x33	; 51
 34a:	87 7f       	andi	r24, 0xF7	; 247
 34c:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 4);
 34e:	83 b7       	in	r24, 0x33	; 51
 350:	8f 7e       	andi	r24, 0xEF	; 239
 352:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 5);
 354:	83 b7       	in	r24, 0x33	; 51
 356:	8f 7d       	andi	r24, 0xDF	; 223
 358:	83 bf       	out	0x33, r24	; 51
	  #endif
	 #endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	08 95       	ret

0000035e <TMR0_start>:
	
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	set_bit(TCCR0 , 0);
 35e:	83 b7       	in	r24, 0x33	; 51
 360:	81 60       	ori	r24, 0x01	; 1
 362:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 364:	83 b7       	in	r24, 0x33	; 51
 366:	8d 7f       	andi	r24, 0xFD	; 253
 368:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
 36a:	83 b7       	in	r24, 0x33	; 51
 36c:	8b 7f       	andi	r24, 0xFB	; 251
 36e:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	08 95       	ret

00000374 <sos_init>:
enu_modify_status_t sos_modify_task(uint8_t ar_task_ID, uint8_t ar_task_priorty, uint8_t ar_task_priodicity)
{
	task[ar_task_ID]->task_ID = ar_task_ID;
	task[ar_task_ID]->task_priodicity = ar_task_priodicity;
	task[ar_task_ID]->task_priority = ar_task_priorty;
}
 374:	63 e0       	ldi	r22, 0x03	; 3
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 63 00 	call	0xc6	; 0xc6 <LED_init>
 380:	64 e0       	ldi	r22, 0x04	; 4
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 63 00 	call	0xc6	; 0xc6 <LED_init>
 38c:	64 e0       	ldi	r22, 0x04	; 4
 38e:	70 e0       	ldi	r23, 0x00	; 0
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 6e 00 	call	0xdc	; 0xdc <PB_init>
 398:	62 e0       	ldi	r22, 0x02	; 2
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 6e 00 	call	0xdc	; 0xdc <PB_init>
 3a4:	0e 94 9e 01 	call	0x33c	; 0x33c <TMR0_init>
 3a8:	08 95       	ret

000003aa <sos_create_task>:
 3aa:	e8 2f       	mov	r30, r24
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	a0 e0       	ldi	r26, 0x00	; 0
 3b0:	b0 e0       	ldi	r27, 0x00	; 0
 3b2:	8c 93       	st	X, r24
 3b4:	50 e0       	ldi	r21, 0x00	; 0
 3b6:	13 96       	adiw	r26, 0x03	; 3
 3b8:	5c 93       	st	X, r21
 3ba:	4e 93       	st	-X, r20
 3bc:	12 97       	sbiw	r26, 0x02	; 2
 3be:	11 96       	adiw	r26, 0x01	; 1
 3c0:	6c 93       	st	X, r22
 3c2:	11 97       	sbiw	r26, 0x01	; 1
 3c4:	ee 0f       	add	r30, r30
 3c6:	ff 1f       	adc	r31, r31
 3c8:	e0 5a       	subi	r30, 0xA0	; 160
 3ca:	ff 4f       	sbci	r31, 0xFF	; 255
 3cc:	80 81       	ld	r24, Z
 3ce:	91 81       	ldd	r25, Z+1	; 0x01
 3d0:	15 96       	adiw	r26, 0x05	; 5
 3d2:	9c 93       	st	X, r25
 3d4:	8e 93       	st	-X, r24
 3d6:	14 97       	sbiw	r26, 0x04	; 4
 3d8:	08 95       	ret

000003da <sos_run>:

void sos_run(void)
{
	TMR0_start();
 3da:	0e 94 af 01 	call	0x35e	; 0x35e <TMR0_start>
	while(1)
	{
		PB_state(DIO_PORTC, DIO_PIN4, &state);
 3de:	44 e7       	ldi	r20, 0x74	; 116
 3e0:	50 e0       	ldi	r21, 0x00	; 0
 3e2:	64 e0       	ldi	r22, 0x04	; 4
 3e4:	70 e0       	ldi	r23, 0x00	; 0
 3e6:	82 e0       	ldi	r24, 0x02	; 2
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 72 00 	call	0xe4	; 0xe4 <PB_state>
		if(state==1)
 3ee:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 3f2:	81 30       	cpi	r24, 0x01	; 1
 3f4:	a1 f7       	brne	.-24     	; 0x3de <sos_run+0x4>
		{
			while(1)
			{
				if((OVF%(3125*3))==0)
 3f6:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <OVF>
 3fa:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <OVF+0x1>
 3fe:	6f e9       	ldi	r22, 0x9F	; 159
 400:	74 e2       	ldi	r23, 0x24	; 36
 402:	0e 94 5f 02 	call	0x4be	; 0x4be <__divmodhi4>
 406:	89 2b       	or	r24, r25
 408:	29 f4       	brne	.+10     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
				{
					task[0]->ptr_func_task();
 40a:	e0 91 04 00 	lds	r30, 0x0004	; 0x800004 <__TEXT_REGION_LENGTH__+0x7f8004>
 40e:	f0 91 05 00 	lds	r31, 0x0005	; 0x800005 <__TEXT_REGION_LENGTH__+0x7f8005>
 412:	09 95       	icall
				}
				if((OVF%(3125*5))==0)
 414:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <OVF>
 418:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <OVF+0x1>
 41c:	69 e0       	ldi	r22, 0x09	; 9
 41e:	7d e3       	ldi	r23, 0x3D	; 61
 420:	0e 94 5f 02 	call	0x4be	; 0x4be <__divmodhi4>
 424:	89 2b       	or	r24, r25
 426:	29 f4       	brne	.+10     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
				{
					task[1]->ptr_func_task();
 428:	e0 91 04 00 	lds	r30, 0x0004	; 0x800004 <__TEXT_REGION_LENGTH__+0x7f8004>
 42c:	f0 91 05 00 	lds	r31, 0x0005	; 0x800005 <__TEXT_REGION_LENGTH__+0x7f8005>
 430:	09 95       	icall
				}
				if(state==0)
 432:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 436:	81 11       	cpse	r24, r1
 438:	de cf       	rjmp	.-68     	; 0x3f6 <sos_run+0x1c>
 43a:	d1 cf       	rjmp	.-94     	; 0x3de <sos_run+0x4>

0000043c <__vector_11>:
	}
}


ISR(TIMER0_OVF)
{
 43c:	1f 92       	push	r1
 43e:	0f 92       	push	r0
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	0f 92       	push	r0
 444:	11 24       	eor	r1, r1
 446:	8f 93       	push	r24
 448:	9f 93       	push	r25
	OVF++;
 44a:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <OVF>
 44e:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <OVF+0x1>
 452:	01 96       	adiw	r24, 0x01	; 1
 454:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <OVF+0x1>
 458:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <OVF>
}
 45c:	9f 91       	pop	r25
 45e:	8f 91       	pop	r24
 460:	0f 90       	pop	r0
 462:	0f be       	out	0x3f, r0	; 63
 464:	0f 90       	pop	r0
 466:	1f 90       	pop	r1
 468:	18 95       	reti

0000046a <__vector_3>:


ISR(EXT_INT_2)
{
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
 474:	2f 93       	push	r18
 476:	3f 93       	push	r19
 478:	4f 93       	push	r20
 47a:	5f 93       	push	r21
 47c:	6f 93       	push	r22
 47e:	7f 93       	push	r23
 480:	8f 93       	push	r24
 482:	9f 93       	push	r25
 484:	af 93       	push	r26
 486:	bf 93       	push	r27
 488:	ef 93       	push	r30
 48a:	ff 93       	push	r31
	PB_state(DIO_PORTC, DIO_PIN4, &state);
 48c:	44 e7       	ldi	r20, 0x74	; 116
 48e:	50 e0       	ldi	r21, 0x00	; 0
 490:	64 e0       	ldi	r22, 0x04	; 4
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	82 e0       	ldi	r24, 0x02	; 2
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 72 00 	call	0xe4	; 0xe4 <PB_state>
 49c:	ff 91       	pop	r31
 49e:	ef 91       	pop	r30
 4a0:	bf 91       	pop	r27
 4a2:	af 91       	pop	r26
 4a4:	9f 91       	pop	r25
 4a6:	8f 91       	pop	r24
 4a8:	7f 91       	pop	r23
 4aa:	6f 91       	pop	r22
 4ac:	5f 91       	pop	r21
 4ae:	4f 91       	pop	r20
 4b0:	3f 91       	pop	r19
 4b2:	2f 91       	pop	r18
 4b4:	0f 90       	pop	r0
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	0f 90       	pop	r0
 4ba:	1f 90       	pop	r1
 4bc:	18 95       	reti

000004be <__divmodhi4>:
 4be:	97 fb       	bst	r25, 7
 4c0:	07 2e       	mov	r0, r23
 4c2:	16 f4       	brtc	.+4      	; 0x4c8 <__divmodhi4+0xa>
 4c4:	00 94       	com	r0
 4c6:	07 d0       	rcall	.+14     	; 0x4d6 <__divmodhi4_neg1>
 4c8:	77 fd       	sbrc	r23, 7
 4ca:	09 d0       	rcall	.+18     	; 0x4de <__divmodhi4_neg2>
 4cc:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__udivmodhi4>
 4d0:	07 fc       	sbrc	r0, 7
 4d2:	05 d0       	rcall	.+10     	; 0x4de <__divmodhi4_neg2>
 4d4:	3e f4       	brtc	.+14     	; 0x4e4 <__divmodhi4_exit>

000004d6 <__divmodhi4_neg1>:
 4d6:	90 95       	com	r25
 4d8:	81 95       	neg	r24
 4da:	9f 4f       	sbci	r25, 0xFF	; 255
 4dc:	08 95       	ret

000004de <__divmodhi4_neg2>:
 4de:	70 95       	com	r23
 4e0:	61 95       	neg	r22
 4e2:	7f 4f       	sbci	r23, 0xFF	; 255

000004e4 <__divmodhi4_exit>:
 4e4:	08 95       	ret

000004e6 <__udivmodhi4>:
 4e6:	aa 1b       	sub	r26, r26
 4e8:	bb 1b       	sub	r27, r27
 4ea:	51 e1       	ldi	r21, 0x11	; 17
 4ec:	07 c0       	rjmp	.+14     	; 0x4fc <__udivmodhi4_ep>

000004ee <__udivmodhi4_loop>:
 4ee:	aa 1f       	adc	r26, r26
 4f0:	bb 1f       	adc	r27, r27
 4f2:	a6 17       	cp	r26, r22
 4f4:	b7 07       	cpc	r27, r23
 4f6:	10 f0       	brcs	.+4      	; 0x4fc <__udivmodhi4_ep>
 4f8:	a6 1b       	sub	r26, r22
 4fa:	b7 0b       	sbc	r27, r23

000004fc <__udivmodhi4_ep>:
 4fc:	88 1f       	adc	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	5a 95       	dec	r21
 502:	a9 f7       	brne	.-22     	; 0x4ee <__udivmodhi4_loop>
 504:	80 95       	com	r24
 506:	90 95       	com	r25
 508:	bc 01       	movw	r22, r24
 50a:	cd 01       	movw	r24, r26
 50c:	08 95       	ret

0000050e <_exit>:
 50e:	f8 94       	cli

00000510 <__stop_program>:
 510:	ff cf       	rjmp	.-2      	; 0x510 <__stop_program>
